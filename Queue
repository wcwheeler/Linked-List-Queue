class Node:
    def __init__(self, val):
        self.val = val
        self.next = None


class Queue:
    def __init__(self):
        self.head = None
        self.tail = None

    def enqueue(self, val):
        newnode = Node(val)
        if self.head is None:
            self.head = newnode
            self.tail = newnode
            self.tail.next = None
        else:
            self.tail.next = newnode
            self.tail = newnode
            newnode.next = None

    def dequeue(self):
        if self.head is None:
            print("Queue is empty, cannot remove element")
        else:
            temp = self.head.val
            self.head = self.head.next
            return temp

    def displayfront(self):
        if self.head is None:
            print("Queue is empty")
        else:
            return self.head.val

    def displayrear(self):
        if self.tail is None:
            print("Queue is empty")
        else:
            return self.tail.val

    def DisplayQueue(self):
        ptr = self.head
        while ptr is not None:
            print(ptr.val)
            ptr = ptr.next


MyQueue = Queue()
# MyQueue.enqueue(1)
# MyQueue.enqueue(2)
# MyQueue.enqueue(3)
# # MyQueue.DisplayQueue()
# # MyQueue.dequeue()
# # MyQueue.DisplayQueue()
# MyQueue.displayrear()
# MyQueue.displayfront()
while True:
    choice = input("Please choose, 1 to enqueue, 2 to dequeue, 3 to display front, 4 to display rear: ")
    if choice == "1":
        val = input("Please type the value")
        MyQueue.enqueue(val)
    elif choice == "2":
        print("Value Dequeued is: " + str(MyQueue.dequeue()))
    elif choice == "3":
        print("Front is : " + str(MyQueue.displayfront()))
    elif choice == "4":
        print("Rear is : " + str(MyQueue.displayrear()))
    else:
        print("Invalid choice please try again")
